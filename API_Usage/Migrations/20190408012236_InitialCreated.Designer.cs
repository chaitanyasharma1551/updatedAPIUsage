// <auto-generated />
using API_Usage.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace API_Usage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190408012236_InitialCreated")]
    partial class InitialCreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API_Usage.Models.Company", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("date");

                    b.Property<string>("iexId");

                    b.Property<bool>("isEnabled");

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("symbol");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("API_Usage.Models.dividends", b =>
                {
                    b.Property<string>("exDate")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("amount");

                    b.Property<string>("declaredDate");

                    b.Property<string>("flag");

                    b.Property<string>("indicated");

                    b.Property<string>("paymentDate");

                    b.Property<string>("qualified");

                    b.Property<string>("recordDate");

                    b.Property<string>("type");

                    b.HasKey("exDate");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("API_Usage.Models.Equity", b =>
                {
                    b.Property<int>("EquityId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("change");

                    b.Property<float>("changeOverTime");

                    b.Property<float>("changePercent");

                    b.Property<float>("close");

                    b.Property<string>("date");

                    b.Property<float>("high");

                    b.Property<string>("label");

                    b.Property<float>("low");

                    b.Property<float>("open");

                    b.Property<string>("symbol");

                    b.Property<int>("unadjustedVolume");

                    b.Property<int>("volume");

                    b.Property<float>("vwap");

                    b.HasKey("EquityId");

                    b.HasIndex("symbol");

                    b.ToTable("Equities");
                });

            modelBuilder.Entity("API_Usage.Models.history", b =>
                {
                    b.Property<string>("date")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("isHalfday");

                    b.Property<int>("litVolume");

                    b.Property<float>("marketShare");

                    b.Property<int>("routedVolume");

                    b.Property<int>("volume");

                    b.HasKey("date");

                    b.ToTable("History");
                });

            modelBuilder.Entity("API_Usage.Models.market", b =>
                {
                    b.Property<string>("mic")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("lastUpdated");

                    b.Property<float>("marketPercent");

                    b.Property<int>("tapeA");

                    b.Property<int>("tapeB");

                    b.Property<int>("tapeC");

                    b.Property<string>("tapeId");

                    b.Property<string>("venueName");

                    b.Property<long>("volume");

                    b.HasKey("mic");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("API_Usage.Models.mktperformance", b =>
                {
                    b.Property<string>("name")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("lastUpdated");

                    b.Property<float>("performance");

                    b.Property<string>("type");

                    b.HasKey("name");

                    b.ToTable("NewPerformance");
                });

            modelBuilder.Entity("API_Usage.Models.shortinterest", b =>
                {
                    b.Property<string>("DaystoCover")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AverageDailyVolume");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CurrentShortInterest");

                    b.Property<string>("NewIssueFlag");

                    b.Property<string>("PercentChange");

                    b.Property<string>("PreviousShortInterest");

                    b.Property<string>("RevisionFlag");

                    b.Property<string>("SecurityName");

                    b.Property<string>("SettlementDate");

                    b.Property<string>("StockAdjustmentFlag");

                    b.Property<string>("SymbolinCMSSymbology");

                    b.Property<string>("SymbolinCQSSymbology");

                    b.Property<string>("SymbolinINETSymbology");

                    b.HasKey("DaystoCover");

                    b.ToTable("NewShortInterest");
                });

            modelBuilder.Entity("API_Usage.Models.Equity", b =>
                {
                    b.HasOne("API_Usage.Models.Company")
                        .WithMany("Equities")
                        .HasForeignKey("symbol");
                });
#pragma warning restore 612, 618
        }
    }
}
